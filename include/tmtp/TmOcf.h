#ifndef TmOcf_h
#define TmOcf_h

#include "myErrors.h"
#include <vector>
#include <stdint.h>

using namespace std;

/*! \brief Models the Operational Control Field (OCF).
 *	\note
 * The OCF is more related to CLCW than to the contents of the frame itself. Because of this, it was modelled in a separate class.
 *
 * As specified in the ECSS standard ECSS-E-ST-50-03C: \n
 * The OCF is an optional field found in the Telemetry Transfer Protocol Trailer and is four Bytes long. \n
 * It provides a standarized mechanism for reporting a small number of real-time functions. \n
 *
 * The 1st bit (or bit 0) contains a Type Flag, which indicates the contents of the OCF field. \n
 * If the Type Flag is zero it means the OCF holds a Type-1-Report, otherwise, it holds a Type-2-Report. \n
 *
 * Type-1-Report : These reports contain a Communications Link Control Word (CLCW) for Telecommand (see ECSS-E-ST-50-04, clause 6.3). \n
 * Type-2-Report : These reports are not defined in the standard. 
 *				  However, there are potential uses defined which are indicated by the value of the 2nd bit (or bit 1) of the OCF.
 *				  If the flag is zero, the contents are considered "project specific", otherwise they are "reserved for future applications".
 * 
 * IMPORTANT: The constructor does not require parameters and some values are left unconfigured, leading to potentially unexpected behaviour. \n
 *				In order to avoid this situation, call the following member functions BEFORE working with the OCF in this sequence:
 *					1.- setReportType(ReportType type)
 *					2.- setContent(uint64_t data)
 *					3.- wrap()
 *
 *				This will be done, for example, by the sending device. The receiving device will only need to use unwrap(vector<uint8_t> raw) \n
 *				For more details, read the warnings on the coments above each member function.
 */
class TmOcf
{
//
// definitions
//
public:
	/*! The three possible report types indicate what the contents of the OCF are.*/
	enum ReportType {
		Type1Clcw, 				/**< Communications Link Control Word (CLCW) for Telecommand. */
		Type2ProjectSpecific,	/**< Standard-undefined, project-specific OCF content. */
		Type2FutureReserved		/**< Standard-undefined report type, reserved for future use. */
		};	
	static const uint16_t ocfLength = 4;	/**< Total length of the Operational Control Field is four Bytes long. */

//
// methods
//
public:

	/*! \brief Constructor for the TmOcf class.
	* 
	* Creates instances with a Type-1-Report and contents '0'.
	*/
	TmOcf();

	/*! \brief Sets the Report Type of the OCF.
	*   \param type The Report Type to configure.
	*/
	virtual void setReportType(ReportType type);

	/*! \brief Retrieves the current Report Type of the OCF. */
	virtual ReportType getReportType();

	/*! \brief Receives data and stores it as a report type to the OCF.
	*   \param data The data stored in the OCF according to the Report Type as indicated in the 1st and 2nd bits.
	*
	* \note May throw TmOcfError. 
	* This member function does a quick check to see if the data received fits in the last 31 or 30 bits of the OCF according to 
	* the value of the 1st and 2nd bits of the OCF (Report Type).
	*
	* \warning
	* There is no mechanism to ensure a proper Report Type is set BEFORE storing data as OCF content.
	*
	*/
	virtual void setContent(uint64_t data);

	/*! \brief Retrieves the contents of the last 31 or 30 bits of the OCF.	*/
	virtual uint64_t getContent();

	/*! \brief Copies the content of "content" into a 4-Byte vector called "raw" and modifies its 1st and 2nd bits according to the Report Type.
	*
	* \warning
	* There is no mechanism to ensure a proper Report Type is set BEFORE calling this function.
	* Assuming this function was called AFTER setting a proper Report Type and filling the OCF contents with data, 
	* it takes the first Byte of the data stored in content, modifies its 1st bit (or 1st and 2nd bits) according to 
	* what is stored in reportType and stores it in the "raw" vector.
	*
	* The "raw" vector (32 bits) is the OCF contents (31 or 30 bits) and the Report Type flags (1 or 2 bits) together.
	*/
	virtual vector<uint8_t> wrap();

	/*! \brief Takes a raw OCF, reads the Type Flags, sets "reportType" accordingly and stores the remaining 30 or 31 bits into "content".
	*   \param raw The 4-Byte vector generated by TmOcf::wrap(), i.e. Report Type flags + OCF contents.
	*
	* \note May throw TmOcfError. 
	* There is no mechanism to ensure a raw OCF is generated BEFORE calling this function. Use TmOcf::wrap() to generate one.
	*/
	virtual void unwrap(vector<uint8_t> raw);

	/*! \brief Displays a message (for debugging) with the Report Type and OCF contents in hexadecimal. */
	virtual void debugOutput();

//
// variables
//
protected:
	ReportType reportType;	/**< Stores the OCF Report Type. May take one of these values: Type1Clcw, Type2ProjectSpecific or Type2FutureReserved. */
	uint64_t content;	/**< Stores the OCF contents in 31 or 30 bits, according to the Report Type. */
};

#endif // TmOcf_h
